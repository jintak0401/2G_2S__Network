/*import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;

public class Client {

	public static void main(String args[]) throws Exception {
		
		String sentence;
		String modifiedSentence;
		
		BufferedReader inFromUser = new BufferedReader(new InputStreamReader(System.in));
		
		System.out.println("inFromUser");
		
		Socket clientSocket = new Socket("127.0.0.1", 6789);
		
		System.out.println("clientSocket");
		
		DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
		
		System.out.println("outToServer");
		
		BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
		
		System.out.println("inFromServer");
		
		sentence = inFromUser.readLine();
		
		System.out.println("sentence");
		
		outToServer.writeBytes(sentence + '\n');
		
		System.out.println("writeBytes");
		
		modifiedSentence = inFromServer.readLine();
		
		System.out.println("FROM SERVER : " + modifiedSentence);
		
		
		clientSocket.close();

		System.out.println("close");
		
		}
	
}
*/

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
 
public class Client {
    public static final int DEFAULT_BUFFER_SIZE = 10000;
    public static void main(String[] args) {
        String serverIP = "127.0.0.1";              //String serverIP = "127.0.0.1";
        int port = 6789;   //int port = 9999;
        String FileName = "C:\\Users\\jinta\\Desktop\\From\\03.mp4";              //String FileName = "test.mp4";
        String announce;
         
        File file = new File(FileName);
        if (!file.exists()) {
            System.out.println("File not Exist.");
            System.exit(0);
        }
         
        long fileSize = file.length();
        int remain = (fileSize % DEFAULT_BUFFER_SIZE == 0) ? 0 : 1;
        int bitmapLength = (int)fileSize / DEFAULT_BUFFER_SIZE + remain;
        int[] bitmap = new int[bitmapLength];
        remain = bitmap.length % 32;
        for (int i = 0; i < bitmap.length; i++) {
        	if (i < bitmap.length - 1) {
        		bitmap[i] = -1;
        	}
        	else {
        		bitmap[i] = 0;
        		if (remain == 0) {
        			bitmap[i] = -1;
        		}
        		for (int j = 0; j < remain; j++) {
        			bitmap[i] |= 1;
        			bitmap[i] <<= 1;
        		}
        	}
        }

        long totalReadBytes = 0;
        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
        int readBytes;
        double startTime = 0;
        int bitmapIndex;
        int offsetInBitmap;
         
        try {
        	
        	
            FileInputStream fis = new FileInputStream(file);
            Socket socket = new Socket(serverIP, port);

        	DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
        	BufferedReader inFromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            if(!socket.isConnected()){
                System.out.println("Socket Connect Error.");
                System.exit(0);
            }
            
            announce = bitmapLength + " " + remain;
            
            dos.writeBytes(announce + "\n");
             
            startTime = System.currentTimeMillis();
            OutputStream os = socket.getOutputStream();

            /* 
            while ((readBytes = fis.read(buffer)) > 0) {
                os.write(buffer, 0, readBytes);
                totalReadBytes += readBytes;
                System.out.println("In progress: " + totalReadBytes + "/"
                        + fileSize + " Byte(s) ("
                        + (totalReadBytes * 100 / fileSize) + " %)");
            }
            */
            
            while ((bitmapIndex = Integer.parseInt(inFromServer.readLine())) != -1) {
            	dos.writeBytes("" + bitmap[bitmapIndex]);
            	offset = Integer.parseInt(inFromServer.readLine());
            	fis.getChannel().position(DEFAULT_BUFFER_SIZE * bitmapIndex + )
            }
             
            System.out.println("File transfer completed.");
            fis.close();
            os.close();
            socket.close();
        } catch (UnknownHostException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
         
        double endTime = System.currentTimeMillis();
        double diffTime = (endTime - startTime)/ 1000;;
        double transferSpeed = (fileSize / 1000)/ diffTime;
         
        System.out.println("time: " + diffTime+ " second(s)");
        System.out.println("Average transfer speed: " + transferSpeed + " KB/s");
    }
}

