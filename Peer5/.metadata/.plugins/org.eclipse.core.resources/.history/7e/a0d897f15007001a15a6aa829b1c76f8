import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.Socket;
import java.util.Random;
import java.util.StringTokenizer;

public class Download implements Runnable {

	int[] bitmapIndex;
	int[] position;
	int port;
	String peerIp;
	int	beforePort;
	String beforePeerIp;
	FileOutputStream fos;
	DataOutputStream dos;
	BufferedReader dis;
	InputStream is;
	Socket socket;
	int beforeConfigIndex;
	StringTokenizer st;

	public Download() {
		try {
			bitmapIndex = new int[3];
			position = new int[3];
			fos = new FileOutputStream(".\\To\\" + Client.filename);
			beforePort = -1;
			beforePeerIp = "";
			beforeConfigIndex = -1;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private synchronized void updateFileInfo() {
		dos.writeBytes("info " + Client.filename);
		String info = dis.readLine();
		st = new StringTokenizer(info);
		int bitmapLength = Integer.parseInt(st.nextToken());
		if (bitmapLength == -1) {
			return;
		}
		int remain = Integer.parseInt(st.nextToken());
		long fileSize = Long.parseLong(st.nextToken());
		Client.updateFileInfo(bitmapLength, remain, fileSize);
	}
	
	private synchronized void occupiedPeer() {
		int index = 0;
		do {
			index = new Random().nextInt(5);
		} while((beforeConfigIndex == index) || (Client.occupied[index] == true));
		Client.occupied[this.beforeConfigIndex] = false;
		beforeConfigIndex = index;
		Client.occupied[this.beforeConfigIndex] = true;
	}
	
	
	private synchronized void 

	public void run() {

	}
}
